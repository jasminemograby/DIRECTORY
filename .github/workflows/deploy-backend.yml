name: Deploy Backend to Railway

on:
  push:
    branches: [main]
    paths: ['backend/**', 'shared/**']
  pull_request:
    branches: [main]
    paths: ['backend/**', 'shared/**']
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: directory_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm run test:coverage
        continue-on-error: true
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/directory_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          USE_MOCK: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci --only=production

      - name: Build Docker image
        run: |
          docker build -t directory-backend:${{ github.sha }} .
          docker tag directory-backend:${{ github.sha }} directory-backend:latest

      - name: Save Docker image
        run: |
          docker save directory-backend:${{ github.sha }} | gzip > backend-image.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-image
          path: backend-image.tar.gz
          retention-days: 7

  deploy-staging:
    name: Deploy to Railway Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Login to Railway
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to staging
        run: |
          railway up --service backend-staging
        env:
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

      - name: Run health check
        run: |
          sleep 30
          curl -f ${{ secrets.RAILWAY_STAGING_URL }}/health || exit 1

  deploy-production:
    name: Deploy to Railway Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Login to Railway
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to production
        run: |
          railway up --service backend-production
        env:
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

      - name: Run health check
        run: |
          sleep 30
          curl -f ${{ secrets.RAILWAY_PRODUCTION_URL }}/health || exit 1

      - name: Run smoke tests
        run: |
          # Test basic endpoints
          curl -f ${{ secrets.RAILWAY_PRODUCTION_URL }}/api/v1/companies || exit 1
          curl -f ${{ secrets.RAILWAY_PRODUCTION_URL }}/api/v1/employees || exit 1
          curl -f ${{ secrets.RAILWAY_PRODUCTION_URL }}/api/v1/trainers || exit 1
          curl -f ${{ secrets.RAILWAY_PRODUCTION_URL }}/api/v1/training-requests || exit 1

  rollback-check:
    name: Check for Rollback to Mock Data
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Login to Railway
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

      - name: Enable mock data mode
        run: |
          railway variables set USE_MOCK=true --service backend-production
        env:
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

      - name: Restart service with mock data
        run: |
          railway redeploy --service backend-production
        env:
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

      - name: Verify mock data is working
        run: |
          sleep 30
          response=$(curl -s ${{ secrets.RAILWAY_PRODUCTION_URL }}/api/v1/companies)
          echo $response | jq -e '.source == "mock"' || exit 1

      - name: Comment on PR about rollback
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ö†Ô∏è **Deployment Issue Detected**
              
              The backend deployment encountered issues, but the system has automatically rolled back to mock data mode to ensure service availability.
              
              **Status:** Service running with mock data
              **Health Check:** ‚úÖ Passing
              **Next Steps:** Review deployment logs and fix issues before next deployment`
            });

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, rollback-check]
    if: always()
    
    steps:
      - name: Notify Slack on Success
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Backend deployment successful! üöÄ'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Rollback
        if: needs.rollback-check.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#deployments'
          text: 'Backend deployment failed, rolled back to mock data! ‚ö†Ô∏è'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.deploy-production.result == 'failure' && needs.rollback-check.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: 'Backend deployment failed completely! ‚ùå'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
